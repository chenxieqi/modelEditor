//--------------------------------------------------------------------------------
// コリジョンシステム
//--------------------------------------------------------------------------------
#pragma once
#include "main.h"
#include <list>

class Rigidbody;
class Collider;
class ColliderSphere;
class ColliderField;

using namespace std;
//--------------------------------------------------------------------------------
// コリジョンクラス
//--------------------------------------------------------------------------------
class Collision
{
public:
    Collision():m_rigidbody_1(nullptr), 
        m_rigidbody_2(nullptr), 
        m_normal(D3DXVECTOR3(0.0f,0.0f,0.0f)),
        m_point(D3DXVECTOR3(0.0f, 0.0f, 0.0f)),
        m_penetration(0.0f){}
    ~Collision(){}
    //--------------------------------------------------------------------------------
    // メンバー変数
    //--------------------------------------------------------------------------------
    Rigidbody *     m_rigidbody_1;
    Rigidbody*      m_rigidbody_2;
    D3DXVECTOR3     m_normal;           // 法線
    D3DXVECTOR3     m_point;            // 衝突点
    float           m_penetration;      // 衝突深度
};

//--------------------------------------------------------------------------------
// コリジョンシステムクラス
//--------------------------------------------------------------------------------

class CollisionSystem
{
public:
    //--------------------------------------------------------------------------------
    // 静的関数
    //--------------------------------------------------------------------------------
    static constexpr float MAX_SLOPE = 60.f*D3DX_PI / 180.0f; //　地面に登れる最大角度
    static const float MAX_SLOPE_COS;

    CollisionSystem();
    ~CollisionSystem();
    //--------------------------------------------------------------------------------
    // 基本関数
    //--------------------------------------------------------------------------------
    bool Init();
    void Uninit();
    void Update();
    //--------------------------------------------------------------------------------
    // 登録・登録解除
    //--------------------------------------------------------------------------------
    void Register(Collider* collider);
    void DeRegister(Collider* collider);
    //--------------------------------------------------------------------------------
    // 生成
    //--------------------------------------------------------------------------------
    static CollisionSystem* Create();
private:
    //--------------------------------------------------------------------------------
    // コライダーモード
    //--------------------------------------------------------------------------------
    enum COLLIDER_MODE
    {
        COLLIDER_DYNAMIC=0,
        COLLIDER_STATIC,
        COLLIDER_MODE_MAX
    };
    //--------------------------------------------------------------------------------
    // メンバー変数
    //--------------------------------------------------------------------------------
    list<Collider*> m_collider_sphere[COLLIDER_MODE_MAX];
    Collider*       m_collider_field;
    //--------------------------------------------------------------------------------
    // あたり判定関数
    //--------------------------------------------------------------------------------
    void SphereDetect(ColliderSphere& sphere_1, ColliderSphere& sphere_2);
    void SphereFieldDetect(ColliderSphere& sphere);
    Collision* Vec3FieldDetect(D3DXVECTOR3& vec3);

};
