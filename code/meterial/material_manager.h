//--------------------------------------------------------------------------------
//  マテリアルマネージャー
//--------------------------------------------------------------------------------
#pragma once
#include <string>
#include <unordered_map>
#include "main.h"

using namespace std;
//--------------------------------------------------------------------------------
//  マテリアルクラス
//--------------------------------------------------------------------------------
class Material
{
public:
    Material(){}
    ~Material(){}
    //--------------------------------------------------------------------------------
    //  メンバー変数
    //--------------------------------------------------------------------------------
    string m_color_texture;
    string m_nomal_texture;
    D3DXCOLOR m_ambient;
    D3DXCOLOR m_diffuse;
    D3DXCOLOR m_specular;
    D3DXCOLOR m_emissive;
    float m_power;
};

//--------------------------------------------------------------------------------
//  マテリアルマネージャークラス
//--------------------------------------------------------------------------------
class MaterialManager
{
public:
    MaterialManager();
    ~MaterialManager();
    //--------------------------------------------------------------------------------
    //  基本関数
    //--------------------------------------------------------------------------------
    void Init();
    void Uninit();
    //--------------------------------------------------------------------------------
    //  生成
    //--------------------------------------------------------------------------------
    static MaterialManager* Create();

    //--------------------------------------------------------------------------------
    //  使用・破棄関数
    //--------------------------------------------------------------------------------
    //　新しいマテリアルを使う
    void Use(const string& material_name,
        const string& color_texture,
        const string& normal_texture=string(),
        const D3DXCOLOR& ambient = D3DXCOLOR(0, 0, 0, 0),
        const D3DXCOLOR& diffuse = D3DXCOLOR(0, 0, 0, 0), 
        const D3DXCOLOR& specular = D3DXCOLOR(0, 0, 0, 0), 
        const D3DXCOLOR& emissive = D3DXCOLOR(0, 0, 0, 0), 
        const float& power=0);
    //　ファイルから読み込んだマテリアル使う
    void Use(const string& material_name);
    void DisUse(const string& material_name);
    //--------------------------------------------------------------------------------
    //  ゲッター
    //--------------------------------------------------------------------------------
    Material* GetMaterial(const string& material_name);
    //--------------------------------------------------------------------------------
    //  ロード
    //--------------------------------------------------------------------------------
    Material* loadMaterialFromFile(const string& material_name);
    //--------------------------------------------------------------------------------
    //  テクスチャ使用・破棄
    //--------------------------------------------------------------------------------
    void UseTexture(const Material& material);
    void DisTexture(const Material& material);

private:
    //--------------------------------------------------------------------------------
    //  構造体
    //--------------------------------------------------------------------------------
    struct MaterialInfo
    {
        MaterialInfo():material_number(1),pointer(nullptr){}
        int material_number;
        Material* pointer;
    };
    //--------------------------------------------------------------------------------
    //  メンバー変数
    //--------------------------------------------------------------------------------
    unordered_map<size_t, MaterialInfo> m_materials;
};