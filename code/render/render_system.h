//--------------------------------------------------------------------------------
//  renderer_system.h
//　レンダーラーシステム
//--------------------------------------------------------------------------------

#pragma once
#include "main.h"
#include "renderer.h"
#include "shader_manager.h"

#include <queue>

using namespace std;

//--------------------------------------------------------------------------------
// クラス
//--------------------------------------------------------------------------------
class RenderSystem
{
public:
    RenderSystem();
    ~RenderSystem();
    //--------------------------------------------------------------------------------
    // 基本関数
    //--------------------------------------------------------------------------------
    void Init(HINSTANCE hInstance, HWND hWnd, BOOL bWindow);
    void Uninit();
    //--------------------------------------------------------------------------------
    // 描画
    //--------------------------------------------------------------------------------
    void DrawBegin();
    void Draw();
    void DrawEnd();
    //--------------------------------------------------------------------------------
    // 生成
    //--------------------------------------------------------------------------------
    static RenderSystem* Create(void);
    //--------------------------------------------------------------------------------
    // レンダー
    //--------------------------------------------------------------------------------
    void Render2dMesh(const string& mesh_name)const;
    void Render3dMesh(const string& mesh_name)const;
    //--------------------------------------------------------------------------------
    // 頂点定義
    //--------------------------------------------------------------------------------
    void InitVertexDeclaration(void);
    //--------------------------------------------------------------------------------
    // 登録
    //--------------------------------------------------------------------------------
    void Register(Renderer* renderer);
    //--------------------------------------------------------------------------------
    // セット背景色
    //--------------------------------------------------------------------------------
    void SetBackgroundColor(const D3DXCOLOR& color) { m_background_color = color; }
    //--------------------------------------------------------------------------------
    // ゲッター
    //--------------------------------------------------------------------------------
    auto GetD3DDevice(void)const{return m_D3DDevice;}
    auto& GetBackgrounColor()const { return m_background_color; }

private:
    //--------------------------------------------------------------------------------
    // メンバー変数
    //--------------------------------------------------------------------------------
    LPDIRECT3D9                  m_D3D;                         //ダイレクト３ｄインターフェース
    LPDIRECT3DDEVICE9            m_D3DDevice;                   //ダイレクト３ｄデバイス
    LPDIRECT3DVERTEXDECLARATION9 m_vertex_declaration_2d;       // 2dバーテックスデクラレーション
    LPDIRECT3DVERTEXDECLARATION9 m_vertex_declaration_3d;       // 3dバーテックスデクラレーション
    queue<Renderer*>             m_renderers[PRIORITY_MAX][SHADER_MAX];
    D3DXCOLOR                    m_background_color;
};

