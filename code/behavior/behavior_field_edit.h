//--------------------------------------------------------------------------------
// フィールドエディター
//--------------------------------------------------------------------------------
#pragma once
#include "behavior.h"
#include "main.h"
#include "mesh_manager.h"
#include <vector>

using namespace std;

//--------------------------------------------------------------------------------
// クラス
//--------------------------------------------------------------------------------
class BehaviorFieldEdit :
    public Behavior
{
public:
    BehaviorFieldEdit(GameObject* game_object) :Behavior(game_object, "FieldEdit"),
        m_show(false),
        m_block_number_x(150),
        m_block_number_z(150),
        m_block_size(D3DXVECTOR2(1,1)),
        m_min_positon(D3DXVECTOR3(0, 0,0)),
        m_max_positon(D3DXVECTOR3(0, 0, 0)),
        m_editor_positon(D3DXVECTOR3(0, 0, 0)),
        m_choose_range(D3DXVECTOR2(0,0)), 
        m_raise_speed(1.0f),
        m_extend_speed(1.0f),
        m_raise_mode_rate(0.0f)
    {}
    ~BehaviorFieldEdit();
    //--------------------------------------------------------------------------------
    // 基本関数
    //--------------------------------------------------------------------------------
    void Init()override;
    void Uninit()override;
    void Update()override;
    void LateUpdate()override;
    //--------------------------------------------------------------------------------
    // セーブ・ロード
    //--------------------------------------------------------------------------------
    void SaveAsBinary(const string& name);
    void LoadFrom(const string& name);
    //--------------------------------------------------------------------------------
    // セッター
    //--------------------------------------------------------------------------------
    void SetPosition(const D3DXVECTOR3& position) { m_editor_positon = position; }
    void SetShow(const bool& show) { m_show = show; }
    //--------------------------------------------------------------------------------
    // ゲッター
    //--------------------------------------------------------------------------------
    auto& GetShow()const { return m_show; }
    //--------------------------------------------------------------------------------
    // 位置調整
    //--------------------------------------------------------------------------------
    D3DXVECTOR3 AdjustPosition(const D3DXVECTOR3& position);
private:
    //--------------------------------------------------------------------------------
    // メンバー変数
    //--------------------------------------------------------------------------------
    bool                m_show;
    vector<VERTEX_3D>   m_vertex3Ds;
    list<int>           m_pervious_indexes;
    int                 m_block_number_x;
    int                 m_block_number_z;
    D3DXVECTOR2         m_block_size;
    D3DXVECTOR3         m_min_positon;
    D3DXVECTOR3         m_max_positon;
    D3DXVECTOR3         m_editor_positon;
    D3DXVECTOR2         m_choose_range;
    float               m_raise_speed;
    float               m_extend_speed;
    float               m_raise_mode_rate;  // average/linear
 
    //--------------------------------------------------------------------------------
    // 高さゲット
    //--------------------------------------------------------------------------------
    float GetHeight(D3DXVECTOR3 position);
    //--------------------------------------------------------------------------------
    // ウインドウ
    //--------------------------------------------------------------------------------
    void ShowWindow(void);
    //--------------------------------------------------------------------------------
    //　範囲内インデックスを取得
    //--------------------------------------------------------------------------------
    list<int>   GetChoosenIndexes(void);
    //--------------------------------------------------------------------------------
    //　全てインデックスを取得
    //--------------------------------------------------------------------------------
    list<int>   GetAllIndexes(void);
    //--------------------------------------------------------------------------------
    // 法線再計算
    //--------------------------------------------------------------------------------
    void RecalculateNormal(const list<int>& indexes);
    //--------------------------------------------------------------------------------
    // 初期化
    //--------------------------------------------------------------------------------
    void Initvertexes(void);
    vector<int> InitIndexes(void);
    //--------------------------------------------------------------------------------
    // 頂点情報更新
    //--------------------------------------------------------------------------------
    void UpdateVertexes(const float& raise_value, const list<int>& indexes);
};

